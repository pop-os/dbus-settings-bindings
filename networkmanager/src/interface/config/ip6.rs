// SPDX-License-Identifier: MPL-2.0
//! # DBus interface proxy for: `org.freedesktop.NetworkManager.IP6Config`
//!
//! This code was generated by `zbus-xmlgen` `2.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/IP6Config/3' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::proxy;

#[proxy(
	interface = "org.freedesktop.NetworkManager.IP6Config",
	default_service = "org.freedesktop.NetworkManager"
)]
pub trait Ipv6Config {
	/// AddressData property
	#[zbus(property)]
	fn address_data(
		&self,
	) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

	/// Addresses property
	#[zbus(property)]
	fn addresses(&self) -> zbus::Result<Vec<(Vec<u8>, u32, Vec<u8>)>>;

	/// DnsOptions property
	#[zbus(property)]
	fn dns_options(&self) -> zbus::Result<Vec<String>>;

	/// DnsPriority property
	#[zbus(property)]
	fn dns_priority(&self) -> zbus::Result<i32>;

	/// Domains property
	#[zbus(property)]
	fn domains(&self) -> zbus::Result<Vec<String>>;

	/// Gateway property
	#[zbus(property)]
	fn gateway(&self) -> zbus::Result<String>;

	/// Nameservers property
	#[zbus(property)]
	fn nameservers(&self) -> zbus::Result<Vec<Vec<u8>>>;

	/// RouteData property
	#[zbus(property)]
	fn route_data(
		&self,
	) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

	/// Routes property
	#[zbus(property)]
	fn routes(&self) -> zbus::Result<Vec<(Vec<u8>, u32, Vec<u8>, u32)>>;

	/// Searches property
	#[zbus(property)]
	fn searches(&self) -> zbus::Result<Vec<String>>;
}

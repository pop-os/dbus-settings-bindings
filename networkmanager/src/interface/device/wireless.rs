// SPDX-License-Identifier: MPL-2.0
//! # DBus interface proxies for: `org.freedesktop.NetworkManager.Device.Wireless`
//!
//! This code was generated by `zbus-xmlgen` `2.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/Devices/3' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::proxy;

#[proxy(
	interface = "org.freedesktop.NetworkManager.Device.Wireless",
	default_service = "org.freedesktop.NetworkManager"
)]
pub trait WirelessDevice {
	/// GetAccessPoints method
	fn get_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// GetAllAccessPoints method
	fn get_all_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// RequestScan method
	fn request_scan(
		&self,
		options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// AccessPointAdded signal
	#[zbus(signal)]
	fn access_point_added(&self, access_point: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// AccessPointRemoved signal
	#[zbus(signal)]
	fn access_point_removed(
		&self,
		access_point: zbus::zvariant::ObjectPath<'_>,
	) -> zbus::Result<()>;

	/// AccessPoints property
	#[zbus(property)]
	fn access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// ActiveAccessPoint property
	#[zbus(property)]
	fn active_access_point(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Bitrate property
	#[zbus(property)]
	fn bitrate(&self) -> zbus::Result<u32>;

	/// HwAddress property
	#[zbus(property)]
	fn hw_address(&self) -> zbus::Result<String>;

	/// LastScan property
	#[zbus(property)]
	fn last_scan(&self) -> zbus::Result<i64>;

	/// Mode property
	#[zbus(property)]
	fn mode(&self) -> zbus::Result<u32>;

	/// PermHwAddress property
	#[zbus(property)]
	fn perm_hw_address(&self) -> zbus::Result<String>;

	/// WirelessCapabilities property
	#[zbus(property)]
	fn wireless_capabilities(&self) -> zbus::Result<u32>;
}

// SPDX-License-Identifier: MPL-2.0
//! # DBus interface proxy for: `org.freedesktop.NetworkManager.Connection.Active`
//!
//! This code was generated by `zbus-xmlgen` `2.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/ActiveConnection/1' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::proxy;

#[proxy(
	interface = "org.freedesktop.NetworkManager.Connection.Active",
	default_service = "org.freedesktop.NetworkManager"
)]
pub trait ActiveConnection {
	/// Connection property
	#[zbus(property)]
	fn connection_(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Default property
	#[zbus(property)]
	fn default(&self) -> zbus::Result<bool>;

	/// Default6 property
	#[zbus(property)]
	fn default6(&self) -> zbus::Result<bool>;

	/// Devices property
	#[zbus(property)]
	fn devices(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

	/// Dhcp4Config property
	#[zbus(property)]
	fn dhcp4_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Dhcp6Config property
	#[zbus(property)]
	fn dhcp6_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Id property
	#[zbus(property)]
	fn id(&self) -> zbus::Result<String>;

	/// Ip4Config property
	#[zbus(property)]
	fn ip4_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Ip6Config property
	#[zbus(property)]
	fn ip6_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// Master property
	#[zbus(property)]
	fn master(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// SpecificObject property
	#[zbus(property)]
	fn specific_object(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

	/// State property
	#[zbus(property)]
	fn state(&self) -> zbus::Result<u32>;

	/// StateFlags property
	#[zbus(property)]
	fn state_flags(&self) -> zbus::Result<u32>;

	/// Type property
	#[zbus(property)]
	fn type_(&self) -> zbus::Result<String>;

	/// Uuid property
	#[zbus(property)]
	fn uuid(&self) -> zbus::Result<String>;

	/// Vpn property
	#[zbus(property)]
	fn vpn(&self) -> zbus::Result<bool>;
}

// SPDX-License-Identifier: MPL-2.0
//! # DBus interface proxy for: `org.freedesktop.NetworkManager.Settings.Connection`
//!
//! This code was generated by `zbus-xmlgen` `2.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/NetworkManager/Settings' from service 'org.freedesktop.NetworkManager' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::proxy;

#[proxy(
	interface = "org.freedesktop.NetworkManager.Settings.Connection",
	default_service = "org.freedesktop.NetworkManager"
)]
pub trait ConnectionSettings {
	/// ClearSecrets method
	fn clear_secrets(&self) -> zbus::Result<()>;

	/// Delete method
	fn delete(&self) -> zbus::Result<()>;

	/// GetSecrets method
	fn get_secrets(
		&self,
		setting_name: &str,
	) -> zbus::Result<
		std::collections::HashMap<
			String,
			std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
		>,
	>;

	/// GetSettings method
	fn get_settings(
		&self,
	) -> zbus::Result<
		std::collections::HashMap<
			String,
			std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
		>,
	>;

	/// Save method
	fn save(&self) -> zbus::Result<()>;

	/// Update method
	fn update(
		&self,
		properties: std::collections::HashMap<
			&str,
			std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
		>,
	) -> zbus::Result<()>;

	/// Update2 method
	fn update2(
		&self,
		settings: std::collections::HashMap<
			&str,
			std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
		>,
		flags: u32,
		args: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

	/// UpdateUnsaved method
	fn update_unsaved(
		&self,
		properties: std::collections::HashMap<
			&str,
			std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
		>,
	) -> zbus::Result<()>;

	/// Removed signal
	#[zbus(signal)]
	fn removed(&self) -> zbus::Result<()>;

	/// Updated signal
	#[zbus(signal)]
	fn updated(&self) -> zbus::Result<()>;

	/// Filename property
	#[zbus(property)]
	fn filename(&self) -> zbus::Result<String>;

	/// Flags property
	#[zbus(property)]
	fn flags(&self) -> zbus::Result<u32>;

	/// Unsaved property
	#[zbus(property)]
	fn unsaved(&self) -> zbus::Result<bool>;
}

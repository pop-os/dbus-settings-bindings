#![allow(non_snake_case)]

//! # D-Bus interface proxy for: `org.bluez.ProfileManager1`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/bluez' from service 'org.bluez' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
	interface = "org.bluez.ProfileManager1",
	default_service = "org.bluez",
	default_path = "/org/bluez"
)]
trait ProfileManager1 {
	/// RegisterProfile method
	fn register_profile(
		&self,
		profile: &zbus::zvariant::ObjectPath<'_>,
		UUID: &str,
		options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// UnregisterProfile method
	fn unregister_profile(&self, profile: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;
}

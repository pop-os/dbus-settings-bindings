//! # DBus interface proxies for: `org.bluez.Adapter1`, `org.bluez.Media1`, `org.bluez.NetworkServer1`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `Interface '/org/bluez/hci0' from service 'org.bluez' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
	interface = "org.bluez.Adapter1",
	default_service = "org.bluez",
	default_path = "/org/bluez/hci0"
)]
trait Adapter1 {
	/// GetDiscoveryFilters method
	fn get_discovery_filters(&self) -> zbus::Result<Vec<String>>;

	/// RemoveDevice method
	fn remove_device(&self, device: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// SetDiscoveryFilter method
	fn set_discovery_filter(
		&self,
		properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// StartDiscovery method
	fn start_discovery(&self) -> zbus::Result<()>;

	/// StopDiscovery method
	fn stop_discovery(&self) -> zbus::Result<()>;

	/// Address property
	#[dbus_proxy(property)]
	fn address(&self) -> zbus::Result<String>;

	/// AddressType property
	#[dbus_proxy(property)]
	fn address_type(&self) -> zbus::Result<String>;

	/// Alias property
	#[dbus_proxy(property)]
	fn alias(&self) -> zbus::Result<String>;
	fn set_alias(&self, value: &str) -> zbus::Result<()>;

	/// Class property
	#[dbus_proxy(property)]
	fn class(&self) -> zbus::Result<u32>;

	/// Discoverable property
	#[dbus_proxy(property)]
	fn discoverable(&self) -> zbus::Result<bool>;
	fn set_discoverable(&self, value: bool) -> zbus::Result<()>;

	/// DiscoverableTimeout property
	#[dbus_proxy(property)]
	fn discoverable_timeout(&self) -> zbus::Result<u32>;
	fn set_discoverable_timeout(&self, value: u32) -> zbus::Result<()>;

	/// Discovering property
	#[dbus_proxy(property)]
	fn discovering(&self) -> zbus::Result<bool>;

	/// ExperimentalFeatures property
	#[dbus_proxy(property)]
	fn experimental_features(&self) -> zbus::Result<Vec<String>>;

	/// Modalias property
	#[dbus_proxy(property)]
	fn modalias(&self) -> zbus::Result<String>;

	/// Name property
	#[dbus_proxy(property)]
	fn name(&self) -> zbus::Result<String>;

	/// Pairable property
	#[dbus_proxy(property)]
	fn pairable(&self) -> zbus::Result<bool>;
	fn set_pairable(&self, value: bool) -> zbus::Result<()>;

	/// PairableTimeout property
	#[dbus_proxy(property)]
	fn pairable_timeout(&self) -> zbus::Result<u32>;
	fn set_pairable_timeout(&self, value: u32) -> zbus::Result<()>;

	/// Powered property
	#[dbus_proxy(property)]
	fn powered(&self) -> zbus::Result<bool>;
	fn set_powered(&self, value: bool) -> zbus::Result<()>;

	/// Roles property
	#[dbus_proxy(property)]
	fn roles(&self) -> zbus::Result<Vec<String>>;

	/// UUIDs property
	#[dbus_proxy(property, name = "UUIDs")]
	fn uuids(&self) -> zbus::Result<Vec<String>>;
}

#[dbus_proxy(
	interface = "org.bluez.Media1",
	default_service = "org.bluez",
	default_path = "/org/bluez/hci0"
)]
trait Media1 {
	/// RegisterApplication method
	fn register_application(
		&self,
		application: &zbus::zvariant::ObjectPath<'_>,
		options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// RegisterEndpoint method
	fn register_endpoint(
		&self,
		endpoint: &zbus::zvariant::ObjectPath<'_>,
		properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// RegisterPlayer method
	fn register_player(
		&self,
		player: &zbus::zvariant::ObjectPath<'_>,
		properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// UnregisterApplication method
	fn unregister_application(
		&self,
		application: &zbus::zvariant::ObjectPath<'_>,
	) -> zbus::Result<()>;

	/// UnregisterEndpoint method
	fn unregister_endpoint(&self, endpoint: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// UnregisterPlayer method
	fn unregister_player(&self, player: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;
}

#[dbus_proxy(
	interface = "org.bluez.NetworkServer1",
	default_service = "org.bluez",
	default_path = "/org/bluez/hci0"
)]
trait NetworkServer1 {
	/// Register method
	fn register(&self, uuid: &str, bridge: &str) -> zbus::Result<()>;

	/// Unregister method
	fn unregister(&self, uuid: &str) -> zbus::Result<()>;
}

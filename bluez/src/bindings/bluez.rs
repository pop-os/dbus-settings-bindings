//! # DBus interface proxies for: `org.bluez.AgentManager1`, `org.bluez.ProfileManager1`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `Interface '/org/bluez' from service 'org.bluez' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
	interface = "org.bluez.AgentManager1",
	default_service = "org.bluez",
	default_path = "/org/bluez"
)]
trait AgentManager1 {
	/// RegisterAgent method
	fn register_agent(
		&self,
		agent: &zbus::zvariant::ObjectPath<'_>,
		capability: &str,
	) -> zbus::Result<()>;

	/// RequestDefaultAgent method
	fn request_default_agent(&self, agent: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

	/// UnregisterAgent method
	fn unregister_agent(&self, agent: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;
}

#[dbus_proxy(
	interface = "org.bluez.ProfileManager1",
	default_service = "org.bluez",
	default_path = "/org/bluez"
)]
trait ProfileManager1 {
	/// RegisterProfile method
	fn register_profile(
		&self,
		profile: &zbus::zvariant::ObjectPath<'_>,
		uuid: &str,
		options: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
	) -> zbus::Result<()>;

	/// UnregisterProfile method
	fn unregister_profile(&self, profile: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;
}
